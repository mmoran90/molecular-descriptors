---
title: "Cleaning and Classifications"
author: "Madeline Chang"
date: "5/29/2024"
output: pdf_document
editor_options: 
  chunk_output_type: console
---

```{r, message = FALSE}
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
library(rpart)
library(rpart.plot)
library(partykit)
library(earth)
library(kernlab)
library(mlbench)
library(randomForest)
library(dplyr)
library(corrplot)
library(pROC)
library(RANN)
library(glmnet)
```

```{r}
changer_data<- read.csv('/Users/mtc/ADS/ADS 503/Project/period+changer-2/data.csv', header = TRUE)
```

```{r}
degen<- nearZeroVar(changer_data)
changer_new<- changer_data[,-degen]

corr<- cor(changer_new[,1:1094])
high_corr <- findCorrelation(corr, cutoff = 0.75)
changer_new<- changer_new[,-high_corr]
```

```{r}
changer_new %>%
  group_by(Class) %>%
  summarise(n = n())
```

```{r}
set.seed(720)

trainingRows <- createDataPartition(changer_new$Class, p = .5, list = FALSE) 
train <- changer_new[trainingRows, ]
test <- changer_new[-trainingRows, ]

ctrl <- trainControl(method = "cv",
                     summaryFunction = twoClassSummary,
                     classProbs = TRUE,
                     savePredictions = TRUE)
```


```{r}
class_function<- function(method){
  model<- train(x = train[,1:216], 
               y = train$Class,
               method = method,
               preProc = c("center", "scale"),
               metric = "ROC",
               trControl = ctrl)
}

class_function_tune<- function(method, grid){
  model<- train(x = train[,1:126], 
               y = train$Class,
               method = method,
               preProc = c("center", "scale"),
               tuneGrid = grid,
               metric = "ROC",
               trControl = ctrl)
}
```

```{r}
set.seed(720)

glmnGrid <- expand.grid(alpha = c(0,  .1,  .2, .4, .6, .8, 1),
                        lambda = seq(.01, .2, length = 10))

nsc_grid<- data.frame(threshold = seq(0, 25, length = 30))

lr<- class_function("glm")
lda<- class_function("lda")
glmn<- class_function_tune("glmnet", glmnGrid)
nsc<- class_function_tune("pam", nsc_grid)
```

```{r}
model_roc <- function(model){
  roc(response = model$pred$obs,
             predictor = model$pred$Changer,
             levels = rev(levels(model$pred$obs)))
}

model_roc(lr)
model_roc(lda)
model_roc(glmn)
model_roc(nsc)
```
